~~ {
~~ FOR AUTO-COMPLETION ASSISTANCE: testvar getvar setvar touchvar clearallvars clearvar getcharintprop getchardoubleprop getcharquadprop getcharboolprop getcharstringprop getisspellknown getcancastspell_hunt getcancastspell_buff getcharvital_base getcharvital_current getcharvital_buffedmax getcharskill_traininglevel getcharskill_base getcharskill_buffed getplayerlandcell getplayercoordinates coordinategetns coordinategetwe coordinategetz coordinatetostring coordinateparse coordinatedistancewithz coordinatedistanceflat wobjectgetphysicscoordinates wobjectgetname wobjectgetobjectclass wobjectgettemplatetype wobjectgetisdooropen wobjectfindnearestmonster wobjectfindnearestdoor wobjectfindnearestbyobjectclass wobjectfindininventorybytemplatetype wobjectfindininventorybyname wobjectfindininventorybynamerx wobjectgetselection wobjectgetplayer wobjectfindnearestbynameandobjectclass actiontryselect actiontryuseitem actiontryapplyitem actiontrygiveitem actiontryequipanywand actiontrycastbyid actiontrycastbyidontarget chatbox chatboxpaste statushud statushudcolored uigetcontrol uisetlabel isfalse istrue iif randint cstr strlen getobjectinternaltype cstrf stopwatchcreate stopwatchstart stopwatchstop stopwatchelapsedseconds cnumber floor ceiling round abs getworldname getitemcountininventorybyname getheading getitemcountininventorybynamerx getheadingto actiontrygiveprofile vitae getfellowshipstatus getfellowshipname getfellowshipisopen getfellowshipisleader getfellowshipleaderid getfellowshipcanrecruit getfellowid getfellowshipcount getfellowshiplocked getfellowname getfellowshipisfull sin cos tan sqrt asin acos atan atan2 sinh cosh tanh vtsetmetastate getregexmatch echo chr ord wobjectgetid wobjectgethealth wobjectfindbyid wobjectgetintprop wobjectfindnearestbytemplatetype wobjectgetopencontainer testquestflag getquestktprogress isrefreshingquests getquestktrequired getqueststatus getisday getgamehour getgamehourname getisnight getgameday getgameticks getminutesuntilday getgamemonth getgamemonthname getminutesuntilnight getgameyear uisetvisible uiviewvisible uiviewexists getgvar touchgvar getpvar touchpvar setgvar cleargvar setpvar clearpvar testgvar clearallgvars testpvar clearallpvars dictgetitem dictcreate dicthaskey dictadditem dictkeys dictremovekey dictvalues dictclear dictsize dictcopy listgetitem listpop listcreate listcontains listremove listadd listindexof listremoveat listinsert listlastindexof listclear listcopy listcount listreverse

~~																						
~~ File auto-generated by metaf, a program created by Eskarina of Morningthaw/Coldeve.	
~~		Get metaf here: https://github.com/JJEII/metaf/									
~~																						
~~ All recognized structural designators:												
~~		STATE:				DO:															
~~		IF:					NAV:														
~~																						
~~ All recognized CONDITION (IF:) operation keywords:									
~~		Never				NavEmpty			MobsInDist_Priority		Not				
~~		Always				Death				NeedToBuff				PSecsInStateGE	
~~		All					VendorOpen			NoMobsInDist			SecsOnSpellGE	
~~		Any					VendorClosed		BlockE					BuPercentGE		
~~		ChatMatch			ItemCountLE			CellE					DistToRteGE		
~~		MainSlotsLE			ItemCountGE			IntoPortal				Expr			
~~		SecsInStateGE		MobsInDist_Name		ExitPortal				ChatCapture		
~~																						
~~ All recognized ACTION (DO:) operation keywords:										
~~		None				EmbedNav			ChatExpr				SetOpt			
~~		SetState			CallState			SetWatchdog				CreateView		
~~		Chat				Return				ClearWatchdog			DestroyView		
~~		DoAll				DoExpr				GetOpt					DestroyAllViews	
~~																						
~~ All recognized NAV types:															
~~		circular			follow														
~~		linear				once														
~~																						
~~ All recognized NAV NODE types:														
~~		flw					vnd															
~~		pnt					ptl															
~~		rcl					tlk															
~~		pau					chk															
~~		cht					jmp															
~~		prt (deprecated in VTank)														
~~ }																					

STATE: {Default} ~~ {
	IF:	Expr {uiviewexists[main]==0}
		DO: CreateView {main} {:main.xml}
	IF: Expr {getvar[generalSettings]==0}
		DO: DoAll
				DoExpr {setvar[generalSettings, 1]}
				DoExpr {setvar[powderRed, True]}
				DoExpr {setvar[powderBlue, False]}
				DoExpr {setvar[coinRed, True]}
				DoExpr {setvar[coinBlue, False]}
				DoExpr {setvar[gambleLum, 5000]}
				SetState {Default}
	IF:	All
			Expr {getcombatstate[]==Peace}
			ItemCountGE 1 {Lugian Aetheria Hammer}
			ItemCountGE 1 {Coalesced Aetheria}
			Expr {listcount[listfilter[wobjectfindallinventorybynamerx[`Coalesced Aetheria`],`wobjectgetintprop[$1,218103849]==27704`]]==0}
		DO:	DoAll
				SetOpt {EnableCombat} {False}
				SetState {Chunk}
	IF:	All
			Expr {getcombatstate[]==Peace}
			ItemCountGE 1 {Aetheria Mana Stone}
			ItemCountGE 1 {Coalesced Aetheria}
			Expr {listcount[listfilter[wobjectfindallinventorybynamerx[`Coalesced Aetheria`],`wobjectgetintprop[$1,218103849]==27704`]]>0}
		DO:	DoAll
				SetOpt {EnableCombat} {False}
				SetState {Reveal}
	IF:	All
			Expr {getcombatstate[]==Peace}
			ItemCountGE 1 {Shattered Legendary Key}
			ItemCountGE 1 {Intricate Carving Tool}
			Expr {getcharskill_buffed[23]>=350}
			Any
				ItemCountLE 0 {Coalesced Aetheria}
		DO:	DoAll
				SetOpt {EnableCombat} {False}
				SetState {Carve}
	IF:	All
			Expr {getvar[powderRed]==True}
			Expr {getcombatstate[]==Peace}
			ItemCountGE 1 {Red Aetheria Chunk}
			ItemCountGE 1 {Aetheria Desiccant}
			Any
				ItemCountLE 0 {Coalesced Aetheria}
				ItemCountLE 0 {Lugian Aetheria Hammer}
		DO:	DoAll
				SetOpt {EnableCombat} {False}
				SetState {RedPowder}
	IF:	All
			Expr {getvar[powderBlue]==True}
			Expr {getcombatstate[]==Peace}
			ItemCountGE 1 {Blue Aetheria Chunk}
			ItemCountGE 1 {Aetheria Desiccant}
			ItemCountLE 0 {Red Aetheria Chunk}
			Any
				ItemCountLE 0 {Coalesced Aetheria}
				ItemCountLE 0 {Lugian Aetheria Hammer}
		DO:	DoAll
				SetOpt {EnableCombat} {False}
				SetState {BluePowder}
	IF:	All
			Expr {getvar[coinRed]==True}
			Expr {getcombatstate[]==Peace}
			ItemCountGE 1 {Red Aetheria Powder}
			ItemCountGE 1 {Ancient Empyrean Trinket}
			Any
				ItemCountLE 0 {Coalesced Aetheria}
				ItemCountLE 0 {Lugian Aetheria Hammer}
		DO:	DoAll
				SetOpt {EnableCombat} {False}
				SetState {EnlightenCoin}
	IF:	All
			Expr {getvar[coinBlue]==True}
			Expr {getcombatstate[]==Peace}
			ItemCountGE 1 {Blue Aetheria Powder}
			ItemCountGE 1 {Ancient Falatacot Trinket}
			Any
				ItemCountLE 0 {Coalesced Aetheria}
				ItemCountLE 0 {Lugian Aetheria Hammer}
		DO:	DoAll
				SetOpt {EnableCombat} {False}
				SetState {WeaklyCoin}
	IF: All
			ChatMatch {^Bringer of the End Gamemaster tells you, "Willing to spend your hard earned luminance and try your luck\? Sounds like another pay day for me"}
			SecsInStateGE 2
		DO: SetState {LumGamble}
	IF:	All
			Any
				ChatMatch {^Aluvian Low-Stakes Gamesmaster tells you}
				ChatMatch {^Sho Low-Stakes Gamesmaster tells you}
				ChatMatch {^Gharu'ndim Low-Stakes Gamesmaster tells you}
			SecsInStateGE 2
		DO: SetState {TokenGambleLow}
	IF:	All
			Any
				ChatMatch {^Aluvian Mid-Stakes Gamesmaster tells you}
				ChatMatch {^Sho Mid-Stakes Gamesmaster tells you}
				ChatMatch {^Gharu'ndim Mid-Stakes Gamesmaster tells you}
			SecsInStateGE 2
		DO: SetState {TokenGambleMid}
	IF:	All
			Any
				ChatMatch {^Aluvian High-Stakes Gamesmaster tells you}
				ChatMatch {^Sho High-Stakes Gamesmaster tells you}
				ChatMatch {^Gharu'ndim High-Stakes Gamesmaster tells you}
			SecsInStateGE 2
		DO: SetState {TokenGambleHigh}
	IF: All
			ChatCapture {^\[BANK\] Pyreals: (?<bankpy>[\d,]+)$} {}
			ChatCapture {^\[BANK\] Luminance: (?<banklum>[\d,]+)$} {}
			ChatCapture {^\[BANK\] Keys: (?<bankkeys>[\d,]+)$} {}
			ChatCapture {^\[BANK\] Enlightened Coins: (?<bankcoins>[\d,]+)$} {}
		DO: DoAll
				DoExpr {uisetlabel[uigetcontrol[Bank, Pyreals], Pyreals \: +tostring[getvar[capturegroup_bankpy]]]}
				DoExpr {uisetlabel[uigetcontrol[Bank, Luminance], Lum \: +tostring[getvar[capturegroup_banklum]]]}
				DoExpr {uisetlabel[uigetcontrol[Bank, Keys], Keys \: +tostring[getvar[capturegroup_bankkeys]]]}
				DoExpr {uisetlabel[uigetcontrol[Bank, EnlCoins], Enl Coins \: +tostring[getvar[capturegroup_bankcoins]]]}
				SetState {Default}
~~ }
STATE: {Carve} ~~ {
	IF:	All
			ItemCountGE 1 {Shattered Legendary Key}
			ItemCountGE 1 {Intricate Carving Tool}
			Expr {getcharskill_buffed[23]>=350}
		DO:	DoAll
				DoExpr {actiontryapplyitem[wobjectfindininventorybyname[Intricate Carving Tool],wobjectfindininventorybyname[Shattered Legendary Key]]}
				SetState {Carve}
	IF:	Any
			Expr {getcharskill_buffed[23]<350}
			ItemCountLE 0 {Shattered Legendary Key}
			ItemCountLE 0 {Intricate Carving Tool}
		DO:	DoAll
				SetOpt {EnableCombat} {True}
				Chat {/b d}
				SetState {Default}
~~ }
STATE: {Chunk} ~~ {
	IF:	Any
			ItemCountLE 0 {Coalesced Aetheria}
		DO:	DoAll
				SetOpt {EnableCombat} {True}
				SetState {Default}
	IF:	All
			Expr {getcombatstate[]==Peace}
			ItemCountGE 1 {Coalesced Aetheria}
			Any
				SecsInStateGE 2
				ChatMatch {^The two artifacts link together effortlessly}
				ChatMatch {^You smash the aetheria with the hammer}
		DO:	DoAll
				DoExpr {actiontryapplyitem[wobjectfindininventorybyname[Lugian Aetheria Hammer],wobjectfindininventorybyname[Coalesced Aetheria]]}
				SetState {Chunk}
~~ }
STATE: {RedPowder} ~~ {
	IF:	All
			ItemCountGE 1 {Red Aetheria Chunk}
			ItemCountGE 1 {Aetheria Desiccant}
			Any
				SecsInStateGE 2
				ChatMatch {^The two artifacts link together effortlessly}
		DO:	DoAll
				DoExpr {actiontryapplyitem[wobjectfindininventorybyname[Aetheria Desiccant],wobjectfindininventorybyname[Red Aetheria Chunk]]}
				SetState {RedPowder}
	IF:	Any
			ItemCountLE 0 {Red Aetheria Chunk}
			ItemCountLE 0 {Aetheria Desiccant}
		DO:	DoAll
				SetOpt {EnableCombat} {True}
				SetState {Default}
~~ }
STATE: {BluePowder} ~~ {
	IF:	All
			ItemCountGE 1 {Blue Aetheria Chunk}
			ItemCountGE 1 {Aetheria Desiccant}
			Any
				SecsInStateGE 2
				ChatMatch {^The two artifacts link together effortlessly}
		DO:	DoAll
				DoExpr {actiontryapplyitem[wobjectfindininventorybyname[Aetheria Desiccant],wobjectfindininventorybyname[Blue Aetheria Chunk]]}
				SetState {BluePowder}
	IF:	Any
			ItemCountLE 0 {Blue Aetheria Chunk}
			ItemCountLE 0 {Aetheria Desiccant}
		DO:	DoAll
				SetOpt {EnableCombat} {True}
				SetState {Default}
~~ }
STATE: {EnlightenCoin} ~~ {
	IF:	All
			ItemCountGE 1 {Red Aetheria Powder}
			ItemCountGE 1 {Ancient Empyrean Trinket}
			Any
				SecsInStateGE 2
				ChatMatch {^You use the aetheria powder on the token and enlighten it into a coin}
		DO:	DoAll
				DoExpr {actiontryapplyitem[wobjectfindininventorybyname[Red Aetheria Powder],wobjectfindininventorybyname[Ancient Empyrean Trinket]]}
				SetState {EnlightenCoin}
	IF:	Any
			ItemCountLE 0 {Red Aetheria Powder}
			ItemCountLE 0 {Ancient Empyrean Trinket}
		DO:	DoAll
				SetOpt {EnableCombat} {True}
				SetState {Default}
~~ }
STATE: {WeaklyCoin} ~~ {
	IF:	All
			ItemCountGE 1 {Blue Aetheria Powder}
			ItemCountGE 1 {Ancient Falatacot Trinket}
			Any
				SecsInStateGE 2
				ChatMatch {^You use the aetheria powder on the token and enlighten it into a weakend coin}
		DO:	DoAll
				DoExpr {actiontryapplyitem[wobjectfindininventorybyname[Blue Aetheria Powder],wobjectfindininventorybyname[Ancient Falatacot Trinket]]}
				SetState {WeaklyCoin}
	IF:	Any
			ItemCountLE 0 {Blue Aetheria Powder}
			ItemCountLE 0 {Ancient Falatacot Trinket}
		DO:	DoAll
				SetOpt {EnableCombat} {True}
				SetState {Default}
~~ }
STATE: {Reveal} ~~ {
	IF:	All
			Expr {listcount[listfilter[wobjectfindallinventorybynamerx[`Coalesced Aetheria`],`wobjectgetintprop[$1,218103849]==27704`]]>0}
			ItemCountGE 1 {Aetheria Mana Stone}
			ItemCountGE 1 {Coalesced Aetheria}
		DO:	DoAll
				DoExpr {setvar[Aeth,listfilter[wobjectfindallinventorybynamerx[`Coalesced Aetheria`],`wobjectgetintprop[$1,218103849]==27704`]] && listcount[$Aeth] > 0 && (actiontryapplyitem[wobjectfindininventorybyname[Aetheria Mana Stone],$Aeth{{0}}] || 1)}
				SetState {Reveal}
	IF:	All
			Expr {listcount[listfilter[wobjectfindallinventorybynamerx[`Coalesced Aetheria`],`wobjectgetintprop[$1,218103849]==27704`]]==0}
		DO:	DoAll
				SetOpt {EnableCombat} {True}
				SetState {Default}
~~ }
STATE: {CramPack} ~~ {
	IF:	Always
		DO:	SetOpt {AutoCram} {True}
	IF:	SecsInStateGE 10
		DO:	DoAll
				SetOpt {AutoCram} {False}
				SetState {CasinoCheck}
~~ }
STATE: {CasinoCheck} ~~ {
	IF: All
			Any
				BlockE A9B20000
				BlockE DB540000
				BlockE 7E640000
			ItemCountGE 1 {Low-Stakes Gambling Token}
		DO: SetState {TokenGambleLow}
	IF: All
			Any
				BlockE A9B20000
				BlockE DB540000
				BlockE 7E640000
			ItemCountLE 0 {Low-Stakes Gambling Token}
			ItemCountGE 1 {Mid-Stakes Gambling Token}
		DO: SetState {TokenGambleMid}
	IF: All
			Any
				BlockE A9B20000
				BlockE DB540000
				BlockE 7E640000
			ItemCountLE 0 {Low-Stakes Gambling Token}
			ItemCountLE 0 {Mid-Stakes Gambling Token}
			ItemCountGE 1 {High-Stakes Gambling Token}
		DO: SetState {TokenGambleHigh}
	IF: Any
			All
				ItemCountLE 0 {Low-Stakes Gambling Token}
				ItemCountLE 0 {Mid-Stakes Gambling Token}
				ItemCountLE 0 {High-Stakes Gambling Token}
			All
				Not BlockE A9B20000
				Not BlockE DB540000
				Not BlockE 7E640000
			BuPercentGE 200
			MainSlotsLE 5
		DO: SetState {Default}
~~ }
STATE: {TokenGambleLow} ~~ {
	IF: ItemCountLE 0 {Low-Stakes Gambling Token}
		DO:	SetState {CasinoCheck}
	IF:	Any
			BuPercentGE 200
			MainSlotsLE 3
		DO:	SetState {Garbage}
	IF:	All
			Any
				ChatMatch {\bLow-Stakes Gamesmaster gives you\b}
				SecsInStateGE 1
			ItemCountGE 1 {Low-Stakes Gambling Token}
			Not BuPercentGE 200
			Not MainSlotsLE 3
		DO:	DoAll
				DoExpr {actiontrygiveitem[wobjectfindininventorybyname[Low-Stakes Gambling Token],wobjectfindnearestbynameandobjectclass[37, \bLow-Stakes Gamesmaster\b]]}
				SetState {TokenGambleLow}
~~ }
STATE: {TokenGambleMid} ~~ {
	IF: ItemCountLE 0 {Mid-Stakes Gambling Token}
		DO:	SetState {CasinoCheck}
	IF:	Any
			BuPercentGE 200
			MainSlotsLE 3
		DO:	SetState {Garbage}
	IF:	All
			Any
				ChatMatch {\bLow-Stakes Gamesmaster gives you\b}
				SecsInStateGE 1
			ItemCountGE 1 {Mid-Stakes Gambling Token}
			Not BuPercentGE 200
			Not MainSlotsLE 3
		DO:	DoAll
				DoExpr {actiontrygiveitem[wobjectfindininventorybyname[Mid-Stakes Gambling Token],wobjectfindnearestbynameandobjectclass[37, \bMid-Stakes Gamesmaster\b]]}
				SetState {TokenGambleMid}
~~ }
STATE: {TokenGambleHigh} ~~ {
	IF:	Any
			ItemCountLE 0 {High-Stakes Gambling Token}
			BuPercentGE 200
			MainSlotsLE 3
		DO:	SetState {Garbage}
	IF:	All
			Any
				ChatMatch {\bHigh-Stakes Gamesmaster gives you\b}
				SecsInStateGE 1
			ItemCountGE 1 {High-Stakes Gambling Token}
			Not BuPercentGE 200
			Not MainSlotsLE 3
		DO:	DoAll
				DoExpr {actiontrygiveitem[wobjectfindininventorybyname[High-Stakes Gambling Token],wobjectfindnearestbynameandobjectclass[37, \bHigh-Stakes Gamesmaster\b]]}
				SetState {TokenGambleHigh}
~~ }
STATE: {LumGamble} ~~ {
	IF: All
			Any
				ChatMatch {^Bringer of the End Gamemaster tells you, "Willing to spend your hard earned luminance and try your luck\? Sounds like another pay day for me"}
				SecsInStateGE 1
			Expr {getvar[LumTotal]<getvar[gambleLum]}
		DO: DoAll
				DoExpr {setvar[LumTotal,getvar[LumTotal]+1]}
				DoExpr {actiontryuseitem[wobjectfindnearestbynameandobjectclass[37,`Bringer of the End Gamemaster`]]}
				SetState {LumGamble}
	IF: Any
			Expr {getvar[LumTotal]>=5000}
			BuPercentGE 250
			MainSlotsLE 3
		DO: DoAll
				SetState {Default}
				DoExpr {clearvar[LumTotal]}
~~ }
STATE: {Garbage} ~~ {
	IF: All
			ItemCountLE 0 {Ash Gromnie Wings}
			ItemCountLE 0 {Dansha-Ki's Gem of Portal Recall}
			ItemCountLE 0 {Gem of Purity}
			ItemCountLE 0 {Gonjoku's Mana Infusion}
			ItemCountLE 0 {Mana Forge Key}
			ItemCountLE 0 {Pack Drudge}
			ItemCountLE 0 {Refreshing Water}
			ItemCountLE 0 {Tasty Pudding}
			ItemCountLE 0 {Treated Healing Kit}
			ItemCountLE 0 {Cave Penguin Cake}
			ItemCountLE 0 {Gem of Balance}
			ItemCountLE 0 {Golden Gromnie}
			ItemCountLE 0 {Hearty Lugian Loaf}
			ItemCountLE 0 {Mosswart Armband}
			ItemCountLE 0 {Potion of Black Fire}
			ItemCountLE 0 {Scroll of Raven Fury}
			ItemCountLE 0 {Thick Lugian Stew}
			ItemCountLE 0 {Antiquated Compass}
			ItemCountLE 0 {Licorice Rat}
			ItemCountLE 0 {Olthoi Larvae Steak}
			ItemCountLE 0 {Priceless Ore}
			ItemCountLE 0 {Stout Lugian Ale}
			ItemCountLE 0 {Black Page of Salt and Ash}
			ItemCountLE 0 {Health Tonic}
			ItemCountLE 0 {Mana Tonic}
			ItemCountLE 0 {Stamina Tonic}
			ItemCountLE 0 {Adjanite Mana Stone}
			ItemCountLE 0 {Azure Gromnie Wings}
			ItemCountLE 0 {Lesser Stamina Kit}
			ItemCountLE 0 {Renegade Herbal Kit}
			ItemCountLE 0 {Gem of Stillness}
			ItemCountLE 0 {Hard Boiled Olthoi Egg}
			ItemCountLE 0 {Pack Golem}
			ItemCountLE 0 {Potion of Destiny's Wind}
			ItemCountLE 0 {Vesayen Style Fried Olthoi Egg}
			ItemCountLE 0 {Fried Olthoi Egg}
			ItemCountLE 0 {Lesser Mana Kit}
			ItemCountLE 0 {Olthoi Egg}
			ItemCountLE 0 {Pickled Olthoi Egg}
			ItemCountLE 0 {Platinum Spirits}
			ItemCountLE 0 {Potion of Endless Vigor}
			ItemCountLE 0 {Candy Corn}
			ItemCountLE 0 {Health Philtre}
			ItemCountLE 0 {Mana Philtre}
			ItemCountLE 0 {Stamina Philtre}
			ItemCountLE 25 {Black Market Gem of Dispelling}
			ItemCountLE 100 {Massive Mana Charge}
			ItemCountLE 0 {Greater Mana Kit}
			ItemCountLE 0 {Ivory Gromnie Wings}
			ItemCountLE 0 {Chocolate Gromnie}
			ItemCountLE 0 {Enhanced Health Elixir}
			ItemCountLE 0 {Enhanced Mana Elixir}
			ItemCountLE 0 {Burning Coal}
			ItemCountLE 0 {Greater Stamina Kit}
			ItemCountLE 0 {Black Luster Pearl}
			ItemCountLE 0 {Pack Scarecrow}
			ItemCountLE 0 {The Orphanage}
			ItemCountLE 0 {Cow}
			ItemCountLE 0 {Crystal}
			ItemCountLE 0 {Eater}
			ItemCountLE 0 {Gearknight}
			ItemCountLE 0 {Lugian}
			ItemCountLE 0 {Moarsman}
			ItemCountLE 0 {Rat}
			ItemCountLE 0 {Remoran}
			ItemCountLE 0 {Rift}
			ItemCountLE 0 {Shadow}
			ItemCountLE 0 {Shreth}
			ItemCountLE 0 {Skeleton}
			ItemCountLE 0 {Tusker}
			ItemCountLE 0 {Zefir}
			ItemCountLE 0 {Banderling}
			ItemCountLE 0 {Drudge}
			ItemCountLE 0 {Idol}
			ItemCountLE 0 {Moar}
			ItemCountLE 0 {Mukkir}
			ItemCountLE 0 {Olthoi}
			ItemCountLE 0 {Phyntos Wasp}
			ItemCountLE 0 {Ruschk}
			ItemCountLE 0 {Scarecrow}
			ItemCountLE 0 {Shark}
			ItemCountLE 0 {Slithis}
			ItemCountLE 0 {Statue}
			ItemCountLE 0 {Tumerok}
			ItemCountLE 0 {Wisp}
			ItemCountLE 0 {Armoredillo}
			ItemCountLE 0 {Carenzi}
			ItemCountLE 0 {Ghost}
			ItemCountLE 0 {Gromnie}
			ItemCountLE 0 {Hollow Minion}
			ItemCountLE 0 {Knath'taed}
			ItemCountLE 0 {Marionette}
			ItemCountLE 0 {Mite}
			ItemCountLE 0 {Monouga}
			ItemCountLE 0 {Mosswart}
			ItemCountLE 0 {Sclavus}
			ItemCountLE 0 {Simulacrum}
			ItemCountLE 0 {Siraluun}
			ItemCountLE 0 {Undead}
			ItemCountLE 0 {Ursuin}
			ItemCountLE 0 {Virindi}
			ItemCountLE 0 {Auroch}
			ItemCountLE 0 {Burun}
			ItemCountLE 0 {Chicken}
			ItemCountLE 0 {Chittick}
			ItemCountLE 0 {Doll}
			ItemCountLE 0 {Elemental}
			ItemCountLE 0 {Fiun}
			ItemCountLE 0 {Golem}
			ItemCountLE 0 {Grievver}
			ItemCountLE 0 {Isparian}
			ItemCountLE 0 {Margul}
			ItemCountLE 0 {Mattekar}
			ItemCountLE 0 {Niffis}
			ItemCountLE 0 {Penguin}
			ItemCountLE 0 {Rabbit}
			ItemCountLE 0 {Sleech}
			ItemCountLE 0 {Snowman}
			ItemCountLE 0 {Thrungus}
		DO: SetState {CramPack}
	IF:	ItemCountGE 1 {Ash Gromnie Wings}
		DO:	DoAll
				DoExpr {actiontrygiveitem[wobjectfindininventorybyname[`Ash Gromnie Wings`],wobjectfindnearestbynameandobjectclass[37, `Garbage Barrel`]]}
				SetState {Garbage}
	IF:	ItemCountGE 1 {Dansha-Ki's Gem of Portal Recall}
		DO:	DoAll
				DoExpr {actiontrygiveitem[wobjectfindininventorybyname[`Dansha-Ki's Gem of Portal Recall`],wobjectfindnearestbynameandobjectclass[37, `Garbage Barrel`]]}
				SetState {Garbage}
	IF:	ItemCountGE 1 {Gem of Purity}
		DO:	DoAll
				DoExpr {actiontrygiveitem[wobjectfindininventorybyname[`Gem of Purity`],wobjectfindnearestbynameandobjectclass[37, `Garbage Barrel`]]}
				SetState {Garbage}
	IF:	ItemCountGE 1 {Gonjoku's Mana Infusion}
		DO:	DoAll
				DoExpr {actiontrygiveitem[wobjectfindininventorybyname[`Gonjoku's Mana Infusion`],wobjectfindnearestbynameandobjectclass[37, `Garbage Barrel`]]}
				SetState {Garbage}
	IF:	ItemCountGE 1 {Mana Forge Key}
		DO:	DoAll
				DoExpr {actiontrygiveitem[wobjectfindininventorybyname[`Mana Forge Key`],wobjectfindnearestbynameandobjectclass[37, `Garbage Barrel`]]}
				SetState {Garbage}
	IF:	ItemCountGE 1 {Pack Drudge}
		DO:	DoAll
				DoExpr {actiontrygiveitem[wobjectfindininventorybyname[`Pack Drudge`],wobjectfindnearestbynameandobjectclass[37, `Garbage Barrel`]]}
				SetState {Garbage}
	IF:	ItemCountGE 1 {Refreshing Water}
		DO:	DoAll
				DoExpr {actiontrygiveitem[wobjectfindininventorybyname[`Refreshing Water`],wobjectfindnearestbynameandobjectclass[37, `Garbage Barrel`]]}
				SetState {Garbage}
	IF:	ItemCountGE 1 {Tasty Pudding}
		DO:	DoAll
				DoExpr {actiontrygiveitem[wobjectfindininventorybyname[`Tasty Pudding`],wobjectfindnearestbynameandobjectclass[37, `Garbage Barrel`]]}
				SetState {Garbage}
	IF:	ItemCountGE 1 {Treated Healing Kit}
		DO:	DoAll
				DoExpr {actiontrygiveitem[wobjectfindininventorybyname[`Treated Healing Kit`],wobjectfindnearestbynameandobjectclass[37, `Garbage Barrel`]]}
				SetState {Garbage}
	IF:	ItemCountGE 1 {Cave Penguin Cake}
		DO:	DoAll
				DoExpr {actiontrygiveitem[wobjectfindininventorybyname[`Cave Penguin Cake`],wobjectfindnearestbynameandobjectclass[37, `Garbage Barrel`]]}
				SetState {Garbage}
	IF:	ItemCountGE 1 {Gem of Balance}
		DO:	DoAll
				DoExpr {actiontrygiveitem[wobjectfindininventorybyname[`Gem of Balance`],wobjectfindnearestbynameandobjectclass[37, `Garbage Barrel`]]}
				SetState {Garbage}
	IF:	ItemCountGE 1 {Golden Gromnie}
		DO:	DoAll
				DoExpr {actiontrygiveitem[wobjectfindininventorybyname[`Golden Gromnie`],wobjectfindnearestbynameandobjectclass[37, `Garbage Barrel`]]}
				SetState {Garbage}
	IF:	ItemCountGE 1 {Hearty Lugian Loaf}
		DO:	DoAll
				DoExpr {actiontrygiveitem[wobjectfindininventorybyname[`Hearty Lugian Loaf`],wobjectfindnearestbynameandobjectclass[37, `Garbage Barrel`]]}
				SetState {Garbage}
	IF:	ItemCountGE 1 {Mosswart Armband}
		DO:	DoAll
				DoExpr {actiontrygiveitem[wobjectfindininventorybyname[`Mosswart Armband`],wobjectfindnearestbynameandobjectclass[37, `Garbage Barrel`]]}
				SetState {Garbage}
	IF:	ItemCountGE 1 {Potion of Black Fire}
		DO:	DoAll
				DoExpr {actiontrygiveitem[wobjectfindininventorybyname[`Potion of Black Fire`],wobjectfindnearestbynameandobjectclass[37, `Garbage Barrel`]]}
				SetState {Garbage}
	IF:	ItemCountGE 1 {Scroll of Raven Fury}
		DO:	DoAll
				DoExpr {actiontrygiveitem[wobjectfindininventorybyname[`Scroll of Raven Fury`],wobjectfindnearestbynameandobjectclass[37, `Garbage Barrel`]]}
				SetState {Garbage}
	IF:	ItemCountGE 1 {Thick Lugian Stew}
		DO:	DoAll
				DoExpr {actiontrygiveitem[wobjectfindininventorybyname[`Thick Lugian Stew`],wobjectfindnearestbynameandobjectclass[37, `Garbage Barrel`]]}
				SetState {Garbage}
	IF:	ItemCountGE 1 {Antiquated Compass}
		DO:	DoAll
				DoExpr {actiontrygiveitem[wobjectfindininventorybyname[`Antiquated Compass`],wobjectfindnearestbynameandobjectclass[37, `Garbage Barrel`]]}
				SetState {Garbage}
	IF:	ItemCountGE 1 {Licorice Rat}
		DO:	DoAll
				DoExpr {actiontrygiveitem[wobjectfindininventorybyname[`Licorice Rat`],wobjectfindnearestbynameandobjectclass[37, `Garbage Barrel`]]}
				SetState {Garbage}
	IF:	ItemCountGE 1 {Olthoi Larvae Steak}
		DO:	DoAll
				DoExpr {actiontrygiveitem[wobjectfindininventorybyname[`Olthoi Larvae Steak`],wobjectfindnearestbynameandobjectclass[37, `Garbage Barrel`]]}
				SetState {Garbage}
	IF:	ItemCountGE 1 {Priceless Ore}
		DO:	DoAll
				DoExpr {actiontrygiveitem[wobjectfindininventorybyname[`Priceless Ore`],wobjectfindnearestbynameandobjectclass[37, `Garbage Barrel`]]}
				SetState {Garbage}
	IF:	ItemCountGE 1 {Stout Lugian Ale}
		DO:	DoAll
				DoExpr {actiontrygiveitem[wobjectfindininventorybyname[`Stout Lugian Ale`],wobjectfindnearestbynameandobjectclass[37, `Garbage Barrel`]]}
				SetState {Garbage}
	IF:	ItemCountGE 1 {Black Page of Salt and Ash}
		DO:	DoAll
				DoExpr {actiontrygiveitem[wobjectfindininventorybyname[`Black Page of Salt and Ash`],wobjectfindnearestbynameandobjectclass[37, `Garbage Barrel`]]}
				SetState {Garbage}
	IF:	ItemCountGE 1 {Health Tonic}
		DO:	DoAll
				DoExpr {actiontrygiveitem[wobjectfindininventorybyname[`Health Tonic`],wobjectfindnearestbynameandobjectclass[37, `Garbage Barrel`]]}
				SetState {Garbage}
	IF:	ItemCountGE 1 {Mana Tonic}
		DO:	DoAll
				DoExpr {actiontrygiveitem[wobjectfindininventorybyname[`Mana Tonic`],wobjectfindnearestbynameandobjectclass[37, `Garbage Barrel`]]}
				SetState {Garbage}
	IF:	ItemCountGE 1 {Stamina Tonic}
		DO:	DoAll
				DoExpr {actiontrygiveitem[wobjectfindininventorybyname[`Stamina Tonic`],wobjectfindnearestbynameandobjectclass[37, `Garbage Barrel`]]}
				SetState {Garbage}
	IF:	ItemCountGE 1 {Adjanite Mana Stone}
		DO:	DoAll
				DoExpr {actiontrygiveitem[wobjectfindininventorybyname[`Adjanite Mana Stone`],wobjectfindnearestbynameandobjectclass[37, `Garbage Barrel`]]}
				SetState {Garbage}
	IF:	ItemCountGE 1 {Azure Gromnie Wings}
		DO:	DoAll
				DoExpr {actiontrygiveitem[wobjectfindininventorybyname[`Azure Gromnie Wings`],wobjectfindnearestbynameandobjectclass[37, `Garbage Barrel`]]}
				SetState {Garbage}
	IF:	ItemCountGE 1 {Lesser Stamina Kit}
		DO:	DoAll
				DoExpr {actiontrygiveitem[wobjectfindininventorybyname[`Lesser Stamina Kit`],wobjectfindnearestbynameandobjectclass[37, `Garbage Barrel`]]}
				SetState {Garbage}
	IF:	ItemCountGE 1 {Renegade Herbal Kit}
		DO:	DoAll
				DoExpr {actiontrygiveitem[wobjectfindininventorybyname[`Renegade Herbal Kit`],wobjectfindnearestbynameandobjectclass[37, `Garbage Barrel`]]}
				SetState {Garbage}
	IF:	ItemCountGE 1 {Gem of Stillness}
		DO:	DoAll
				DoExpr {actiontrygiveitem[wobjectfindininventorybyname[`Gem of Stillness`],wobjectfindnearestbynameandobjectclass[37, `Garbage Barrel`]]}
				SetState {Garbage}
	IF:	ItemCountGE 1 {Hard Boiled Olthoi Egg}
		DO:	DoAll
				DoExpr {actiontrygiveitem[wobjectfindininventorybyname[`Hard Boiled Olthoi Egg`],wobjectfindnearestbynameandobjectclass[37, `Garbage Barrel`]]}
				SetState {Garbage}
	IF:	ItemCountGE 1 {Pack Golem}
		DO:	DoAll
				DoExpr {actiontrygiveitem[wobjectfindininventorybyname[`Pack Golem`],wobjectfindnearestbynameandobjectclass[37, `Garbage Barrel`]]}
				SetState {Garbage}
	IF:	ItemCountGE 1 {Potion of Destiny's Wind}
		DO:	DoAll
				DoExpr {actiontrygiveitem[wobjectfindininventorybyname[`Potion of Destiny's Wind`],wobjectfindnearestbynameandobjectclass[37, `Garbage Barrel`]]}
				SetState {Garbage}
	IF:	ItemCountGE 1 {Vesayen Style Fried Olthoi Egg}
		DO:	DoAll
				DoExpr {actiontrygiveitem[wobjectfindininventorybyname[`Vesayen Style Fried Olthoi Egg`],wobjectfindnearestbynameandobjectclass[37, `Garbage Barrel`]]}
				SetState {Garbage}
	IF:	ItemCountGE 1 {Fried Olthoi Egg}
		DO:	DoAll
				DoExpr {actiontrygiveitem[wobjectfindininventorybyname[`Fried Olthoi Egg`],wobjectfindnearestbynameandobjectclass[37, `Garbage Barrel`]]}
				SetState {Garbage}
	IF:	ItemCountGE 1 {Lesser Mana Kit}
		DO:	DoAll
				DoExpr {actiontrygiveitem[wobjectfindininventorybyname[`Lesser Mana Kit`],wobjectfindnearestbynameandobjectclass[37, `Garbage Barrel`]]}
				SetState {Garbage}
	IF:	ItemCountGE 1 {Olthoi Egg}
		DO:	DoAll
				DoExpr {actiontrygiveitem[wobjectfindininventorybyname[`Olthoi Egg`],wobjectfindnearestbynameandobjectclass[37, `Garbage Barrel`]]}
				SetState {Garbage}
	IF:	ItemCountGE 1 {Pickled Olthoi Egg}
		DO:	DoAll
				DoExpr {actiontrygiveitem[wobjectfindininventorybyname[`Pickled Olthoi Egg`],wobjectfindnearestbynameandobjectclass[37, `Garbage Barrel`]]}
				SetState {Garbage}
	IF:	ItemCountGE 1 {Platinum Spirits}
		DO:	DoAll
				DoExpr {actiontrygiveitem[wobjectfindininventorybyname[`Platinum Spirits`],wobjectfindnearestbynameandobjectclass[37, `Garbage Barrel`]]}
				SetState {Garbage}
	IF:	ItemCountGE 1 {Potion of Endless Vigor}
		DO:	DoAll
				DoExpr {actiontrygiveitem[wobjectfindininventorybyname[`Potion of Endless Vigor`],wobjectfindnearestbynameandobjectclass[37, `Garbage Barrel`]]}
				SetState {Garbage}
	IF:	ItemCountGE 1 {Candy Corn}
		DO:	DoAll
				DoExpr {actiontrygiveitem[wobjectfindininventorybyname[`Candy Corn`],wobjectfindnearestbynameandobjectclass[37, `Garbage Barrel`]]}
				SetState {Garbage}
	IF:	ItemCountGE 1 {Health Philtre}
		DO:	DoAll
				DoExpr {actiontrygiveitem[wobjectfindininventorybyname[`Health Philtre`],wobjectfindnearestbynameandobjectclass[37, `Garbage Barrel`]]}
				SetState {Garbage}
	IF:	ItemCountGE 1 {Mana Philtre}
		DO:	DoAll
				DoExpr {actiontrygiveitem[wobjectfindininventorybyname[`Mana Philtre`],wobjectfindnearestbynameandobjectclass[37, `Garbage Barrel`]]}
				SetState {Garbage}
	IF:	ItemCountGE 1 {Stamina Philtre}
		DO:	DoAll
				DoExpr {actiontrygiveitem[wobjectfindininventorybyname[`Stamina Philtre`],wobjectfindnearestbynameandobjectclass[37, `Garbage Barrel`]]}
				SetState {Garbage}
	IF:	ItemCountGE 26 {Black Market Gem of Dispelling}
		DO:	DoAll
				DoExpr {actiontrygiveitem[wobjectfindininventorybyname[`Black Market Gem of Dispelling`],wobjectfindnearestbynameandobjectclass[37, `Garbage Barrel`]]}
				SetState {Garbage}
	IF:	ItemCountGE 1 {Greater Mana Kit}
		DO:	DoAll
				DoExpr {actiontrygiveitem[wobjectfindininventorybyname[`Greater Mana Kit`],wobjectfindnearestbynameandobjectclass[37, `Garbage Barrel`]]}
				SetState {Garbage}
	IF:	ItemCountGE 1 {Ivory Gromnie Wings}
		DO:	DoAll
				DoExpr {actiontrygiveitem[wobjectfindininventorybyname[`Ivory Gromnie Wings`],wobjectfindnearestbynameandobjectclass[37, `Garbage Barrel`]]}
				SetState {Garbage}
	IF:	ItemCountGE 101 {Massive Mana Charge}
		DO:	DoAll
				DoExpr {actiontrygiveitem[wobjectfindininventorybyname[`Massive Mana Charge`],wobjectfindnearestbynameandobjectclass[37, `Garbage Barrel`]]}
				SetState {Garbage}
	IF:	ItemCountGE 1 {Chocolate Gromnie}
		DO:	DoAll
				DoExpr {actiontrygiveitem[wobjectfindininventorybyname[`Chocolate Gromnie`],wobjectfindnearestbynameandobjectclass[37, `Garbage Barrel`]]}
				SetState {Garbage}
	IF:	ItemCountGE 1 {Enhanced Health Elixir}
		DO:	DoAll
				DoExpr {actiontrygiveitem[wobjectfindininventorybyname[`Enhanced Health Elixir`],wobjectfindnearestbynameandobjectclass[37, `Garbage Barrel`]]}
				SetState {Garbage}
	IF:	ItemCountGE 1 {Enhanced Mana Elixir}
		DO:	DoAll
				DoExpr {actiontrygiveitem[wobjectfindininventorybyname[`Enhanced Mana Elixir`],wobjectfindnearestbynameandobjectclass[37, `Garbage Barrel`]]}
				SetState {Garbage}
	IF:	ItemCountGE 1 {Burning Coal}
		DO:	DoAll
				DoExpr {actiontrygiveitem[wobjectfindininventorybyname[`Burning Coal`],wobjectfindnearestbynameandobjectclass[37, `Garbage Barrel`]]}
				SetState {Garbage}
	IF:	ItemCountGE 1 {Greater Stamina Kit}
		DO:	DoAll
				DoExpr {actiontrygiveitem[wobjectfindininventorybyname[`Greater Stamina Kit`],wobjectfindnearestbynameandobjectclass[37, `Garbage Barrel`]]}
				SetState {Garbage}
	IF:	ItemCountGE 1 {Black Luster Pearl}
		DO:	DoAll
				DoExpr {actiontrygiveitem[wobjectfindininventorybyname[`Black Luster Pearl`],wobjectfindnearestbynameandobjectclass[37, `Garbage Barrel`]]}
				SetState {Garbage}
	IF:	ItemCountGE 1 {Pack Scarecrow}
		DO:	DoAll
				DoExpr {actiontrygiveitem[wobjectfindininventorybyname[`Pack Scarecrow`],wobjectfindnearestbynameandobjectclass[37, `Garbage Barrel`]]}
				SetState {Garbage}
	IF:	ItemCountGE 1 {The Orphanage}
		DO:	DoAll
				DoExpr {actiontrygiveitem[wobjectfindininventorybyname[`The Orphanage`],wobjectfindnearestbynameandobjectclass[37, `Garbage Barrel`]]}
				SetState {Garbage}
	IF:	ItemCountGE 1 {Cow}
		DO:	DoAll
				DoExpr {actiontrygiveitem[wobjectfindininventorybyname[`Cow`],wobjectfindnearestbynameandobjectclass[37, `Garbage Barrel`]]}
				SetState {Garbage}
	IF:	ItemCountGE 1 {Crystal}
		DO:	DoAll
				DoExpr {actiontrygiveitem[wobjectfindininventorybyname[`Crystal`],wobjectfindnearestbynameandobjectclass[37, `Garbage Barrel`]]}
				SetState {Garbage}
	IF:	ItemCountGE 1 {Eater}
		DO:	DoAll
				DoExpr {actiontrygiveitem[wobjectfindininventorybyname[`Eater`],wobjectfindnearestbynameandobjectclass[37, `Garbage Barrel`]]}
				SetState {Garbage}
	IF:	ItemCountGE 1 {Gearknight}
		DO:	DoAll
				DoExpr {actiontrygiveitem[wobjectfindininventorybyname[`Gearknight`],wobjectfindnearestbynameandobjectclass[37, `Garbage Barrel`]]}
				SetState {Garbage}
	IF:	ItemCountGE 1 {Lugian}
		DO:	DoAll
				DoExpr {actiontrygiveitem[wobjectfindininventorybyname[`Lugian`],wobjectfindnearestbynameandobjectclass[37, `Garbage Barrel`]]}
				SetState {Garbage}
	IF:	ItemCountGE 1 {Moarsman}
		DO:	DoAll
				DoExpr {actiontrygiveitem[wobjectfindininventorybyname[`Moarsman`],wobjectfindnearestbynameandobjectclass[37, `Garbage Barrel`]]}
				SetState {Garbage}
	IF:	ItemCountGE 1 {Rat}
		DO:	DoAll
				DoExpr {actiontrygiveitem[wobjectfindininventorybyname[`Rat`],wobjectfindnearestbynameandobjectclass[37, `Garbage Barrel`]]}
				SetState {Garbage}
	IF:	ItemCountGE 1 {Remoran}
		DO:	DoAll
				DoExpr {actiontrygiveitem[wobjectfindininventorybyname[`Remoran`],wobjectfindnearestbynameandobjectclass[37, `Garbage Barrel`]]}
				SetState {Garbage}
	IF:	ItemCountGE 1 {Rift}
		DO:	DoAll
				DoExpr {actiontrygiveitem[wobjectfindininventorybyname[`Rift`],wobjectfindnearestbynameandobjectclass[37, `Garbage Barrel`]]}
				SetState {Garbage}
	IF:	ItemCountGE 1 {Shadow}
		DO:	DoAll
				DoExpr {actiontrygiveitem[wobjectfindininventorybyname[`Shadow`],wobjectfindnearestbynameandobjectclass[37, `Garbage Barrel`]]}
				SetState {Garbage}
	IF:	ItemCountGE 1 {Shreth}
		DO:	DoAll
				DoExpr {actiontrygiveitem[wobjectfindininventorybyname[`Shreth`],wobjectfindnearestbynameandobjectclass[37, `Garbage Barrel`]]}
				SetState {Garbage}
	IF:	ItemCountGE 1 {Skeleton}
		DO:	DoAll
				DoExpr {actiontrygiveitem[wobjectfindininventorybyname[`Skeleton`],wobjectfindnearestbynameandobjectclass[37, `Garbage Barrel`]]}
				SetState {Garbage}
	IF:	ItemCountGE 1 {Tusker}
		DO:	DoAll
				DoExpr {actiontrygiveitem[wobjectfindininventorybyname[`Tusker`],wobjectfindnearestbynameandobjectclass[37, `Garbage Barrel`]]}
				SetState {Garbage}
	IF:	ItemCountGE 1 {Zefir}
		DO:	DoAll
				DoExpr {actiontrygiveitem[wobjectfindininventorybyname[`Zefir`],wobjectfindnearestbynameandobjectclass[37, `Garbage Barrel`]]}
				SetState {Garbage}
	IF:	ItemCountGE 1 {Banderling}
		DO:	DoAll
				DoExpr {actiontrygiveitem[wobjectfindininventorybyname[`Banderling`],wobjectfindnearestbynameandobjectclass[37, `Garbage Barrel`]]}
				SetState {Garbage}
	IF:	ItemCountGE 1 {Drudge}
		DO:	DoAll
				DoExpr {actiontrygiveitem[wobjectfindininventorybyname[`Drudge`],wobjectfindnearestbynameandobjectclass[37, `Garbage Barrel`]]}
				SetState {Garbage}
	IF:	ItemCountGE 1 {Idol}
		DO:	DoAll
				DoExpr {actiontrygiveitem[wobjectfindininventorybyname[`Idol`],wobjectfindnearestbynameandobjectclass[37, `Garbage Barrel`]]}
				SetState {Garbage}
	IF:	ItemCountGE 1 {Moar}
		DO:	DoAll
				DoExpr {actiontrygiveitem[wobjectfindininventorybyname[`Moar`],wobjectfindnearestbynameandobjectclass[37, `Garbage Barrel`]]}
				SetState {Garbage}
	IF:	ItemCountGE 1 {Mukkir}
		DO:	DoAll
				DoExpr {actiontrygiveitem[wobjectfindininventorybyname[`Mukkir`],wobjectfindnearestbynameandobjectclass[37, `Garbage Barrel`]]}
				SetState {Garbage}
	IF:	ItemCountGE 1 {Olthoi}
		DO:	DoAll
				DoExpr {actiontrygiveitem[wobjectfindininventorybyname[`Olthoi`],wobjectfindnearestbynameandobjectclass[37, `Garbage Barrel`]]}
				SetState {Garbage}
	IF:	ItemCountGE 1 {Phyntos Wasp}
		DO:	DoAll
				DoExpr {actiontrygiveitem[wobjectfindininventorybyname[`Phyntos Wasp`],wobjectfindnearestbynameandobjectclass[37, `Garbage Barrel`]]}
				SetState {Garbage}
	IF:	ItemCountGE 1 {Ruschk}
		DO:	DoAll
				DoExpr {actiontrygiveitem[wobjectfindininventorybyname[`Ruschk`],wobjectfindnearestbynameandobjectclass[37, `Garbage Barrel`]]}
				SetState {Garbage}
	IF:	ItemCountGE 1 {Scarecrow}
		DO:	DoAll
				DoExpr {actiontrygiveitem[wobjectfindininventorybyname[`Scarecrow`],wobjectfindnearestbynameandobjectclass[37, `Garbage Barrel`]]}
				SetState {Garbage}
	IF:	ItemCountGE 1 {Shark}
		DO:	DoAll
				DoExpr {actiontrygiveitem[wobjectfindininventorybyname[`Shark`],wobjectfindnearestbynameandobjectclass[37, `Garbage Barrel`]]}
				SetState {Garbage}
	IF:	ItemCountGE 1 {Slithis}
		DO:	DoAll
				DoExpr {actiontrygiveitem[wobjectfindininventorybyname[`Slithis`],wobjectfindnearestbynameandobjectclass[37, `Garbage Barrel`]]}
				SetState {Garbage}
	IF:	ItemCountGE 1 {Statue}
		DO:	DoAll
				DoExpr {actiontrygiveitem[wobjectfindininventorybyname[`Statue`],wobjectfindnearestbynameandobjectclass[37, `Garbage Barrel`]]}
				SetState {Garbage}
	IF:	ItemCountGE 1 {Tumerok}
		DO:	DoAll
				DoExpr {actiontrygiveitem[wobjectfindininventorybyname[`Tumerok`],wobjectfindnearestbynameandobjectclass[37, `Garbage Barrel`]]}
				SetState {Garbage}
	IF:	ItemCountGE 1 {Wisp}
		DO:	DoAll
				DoExpr {actiontrygiveitem[wobjectfindininventorybyname[`Wisp`],wobjectfindnearestbynameandobjectclass[37, `Garbage Barrel`]]}
				SetState {Garbage}
	IF:	ItemCountGE 1 {Armoredillo}
		DO:	DoAll
				DoExpr {actiontrygiveitem[wobjectfindininventorybyname[`Armoredillo`],wobjectfindnearestbynameandobjectclass[37, `Garbage Barrel`]]}
				SetState {Garbage}
	IF:	ItemCountGE 1 {Carenzi}
		DO:	DoAll
				DoExpr {actiontrygiveitem[wobjectfindininventorybyname[`Carenzi`],wobjectfindnearestbynameandobjectclass[37, `Garbage Barrel`]]}
				SetState {Garbage}
	IF:	ItemCountGE 1 {Ghost}
		DO:	DoAll
				DoExpr {actiontrygiveitem[wobjectfindininventorybyname[`Ghost`],wobjectfindnearestbynameandobjectclass[37, `Garbage Barrel`]]}
				SetState {Garbage}
	IF:	ItemCountGE 1 {Gromnie}
		DO:	DoAll
				DoExpr {actiontrygiveitem[wobjectfindininventorybyname[`Gromnie`],wobjectfindnearestbynameandobjectclass[37, `Garbage Barrel`]]}
				SetState {Garbage}
	IF:	ItemCountGE 1 {Hollow Minion}
		DO:	DoAll
				DoExpr {actiontrygiveitem[wobjectfindininventorybyname[`Hollow Minion`],wobjectfindnearestbynameandobjectclass[37, `Garbage Barrel`]]}
				SetState {Garbage}
	IF:	ItemCountGE 1 {Knath'taed}
		DO:	DoAll
				DoExpr {actiontrygiveitem[wobjectfindininventorybyname[`Knath'taed`],wobjectfindnearestbynameandobjectclass[37, `Garbage Barrel`]]}
				SetState {Garbage}
	IF:	ItemCountGE 1 {Marionette}
		DO:	DoAll
				DoExpr {actiontrygiveitem[wobjectfindininventorybyname[`Marionette`],wobjectfindnearestbynameandobjectclass[37, `Garbage Barrel`]]}
				SetState {Garbage}
	IF:	ItemCountGE 1 {Mite}
		DO:	DoAll
				DoExpr {actiontrygiveitem[wobjectfindininventorybyname[`Mite`],wobjectfindnearestbynameandobjectclass[37, `Garbage Barrel`]]}
				SetState {Garbage}
	IF:	ItemCountGE 1 {Monouga}
		DO:	DoAll
				DoExpr {actiontrygiveitem[wobjectfindininventorybyname[`Monouga`],wobjectfindnearestbynameandobjectclass[37, `Garbage Barrel`]]}
				SetState {Garbage}
	IF:	ItemCountGE 1 {Mosswart}
		DO:	DoAll
				DoExpr {actiontrygiveitem[wobjectfindininventorybyname[`Mosswart`],wobjectfindnearestbynameandobjectclass[37, `Garbage Barrel`]]}
				SetState {Garbage}
	IF:	ItemCountGE 1 {Sclavus}
		DO:	DoAll
				DoExpr {actiontrygiveitem[wobjectfindininventorybyname[`Sclavus`],wobjectfindnearestbynameandobjectclass[37, `Garbage Barrel`]]}
				SetState {Garbage}
	IF:	ItemCountGE 1 {Simulacrum}
		DO:	DoAll
				DoExpr {actiontrygiveitem[wobjectfindininventorybyname[`Simulacrum`],wobjectfindnearestbynameandobjectclass[37, `Garbage Barrel`]]}
				SetState {Garbage}
	IF:	ItemCountGE 1 {Siraluun}
		DO:	DoAll
				DoExpr {actiontrygiveitem[wobjectfindininventorybyname[`Siraluun`],wobjectfindnearestbynameandobjectclass[37, `Garbage Barrel`]]}
				SetState {Garbage}
	IF:	ItemCountGE 1 {Undead}
		DO:	DoAll
				DoExpr {actiontrygiveitem[wobjectfindininventorybyname[`Undead`],wobjectfindnearestbynameandobjectclass[37, `Garbage Barrel`]]}
				SetState {Garbage}
	IF:	ItemCountGE 1 {Ursuin}
		DO:	DoAll
				DoExpr {actiontrygiveitem[wobjectfindininventorybyname[`Ursuin`],wobjectfindnearestbynameandobjectclass[37, `Garbage Barrel`]]}
				SetState {Garbage}
	IF:	ItemCountGE 1 {Virindi}
		DO:	DoAll
				DoExpr {actiontrygiveitem[wobjectfindininventorybyname[`Virindi`],wobjectfindnearestbynameandobjectclass[37, `Garbage Barrel`]]}
				SetState {Garbage}
	IF:	ItemCountGE 1 {Auroch}
		DO:	DoAll
				DoExpr {actiontrygiveitem[wobjectfindininventorybyname[`Auroch`],wobjectfindnearestbynameandobjectclass[37, `Garbage Barrel`]]}
				SetState {Garbage}
	IF:	ItemCountGE 1 {Burun}
		DO:	DoAll
				DoExpr {actiontrygiveitem[wobjectfindininventorybyname[`Burun`],wobjectfindnearestbynameandobjectclass[37, `Garbage Barrel`]]}
				SetState {Garbage}
	IF:	ItemCountGE 1 {Chicken}
		DO:	DoAll
				DoExpr {actiontrygiveitem[wobjectfindininventorybyname[`Chicken`],wobjectfindnearestbynameandobjectclass[37, `Garbage Barrel`]]}
				SetState {Garbage}
	IF:	ItemCountGE 1 {Chittick}
		DO:	DoAll
				DoExpr {actiontrygiveitem[wobjectfindininventorybyname[`Chittick`],wobjectfindnearestbynameandobjectclass[37, `Garbage Barrel`]]}
				SetState {Garbage}
	IF:	ItemCountGE 1 {Doll}
		DO:	DoAll
				DoExpr {actiontrygiveitem[wobjectfindininventorybyname[`Doll`],wobjectfindnearestbynameandobjectclass[37, `Garbage Barrel`]]}
				SetState {Garbage}
	IF:	ItemCountGE 1 {Elemental}
		DO:	DoAll
				DoExpr {actiontrygiveitem[wobjectfindininventorybyname[`Elemental`],wobjectfindnearestbynameandobjectclass[37, `Garbage Barrel`]]}
				SetState {Garbage}
	IF:	ItemCountGE 1 {Fiun}
		DO:	DoAll
				DoExpr {actiontrygiveitem[wobjectfindininventorybyname[`Fiun`],wobjectfindnearestbynameandobjectclass[37, `Garbage Barrel`]]}
				SetState {Garbage}
	IF:	ItemCountGE 1 {Golem}
		DO:	DoAll
				DoExpr {actiontrygiveitem[wobjectfindininventorybyname[`Golem`],wobjectfindnearestbynameandobjectclass[37, `Garbage Barrel`]]}
				SetState {Garbage}
	IF:	ItemCountGE 1 {Grievver}
		DO:	DoAll
				DoExpr {actiontrygiveitem[wobjectfindininventorybyname[`Grievver`],wobjectfindnearestbynameandobjectclass[37, `Garbage Barrel`]]}
				SetState {Garbage}
	IF:	ItemCountGE 1 {Isparian}
		DO:	DoAll
				DoExpr {actiontrygiveitem[wobjectfindininventorybyname[`Isparian`],wobjectfindnearestbynameandobjectclass[37, `Garbage Barrel`]]}
				SetState {Garbage}
	IF:	ItemCountGE 1 {Margul}
		DO:	DoAll
				DoExpr {actiontrygiveitem[wobjectfindininventorybyname[`Margul`],wobjectfindnearestbynameandobjectclass[37, `Garbage Barrel`]]}
				SetState {Garbage}
	IF:	ItemCountGE 1 {Mattekar}
		DO:	DoAll
				DoExpr {actiontrygiveitem[wobjectfindininventorybyname[`Mattekar`],wobjectfindnearestbynameandobjectclass[37, `Garbage Barrel`]]}
				SetState {Garbage}
	IF:	ItemCountGE 1 {Niffis}
		DO:	DoAll
				DoExpr {actiontrygiveitem[wobjectfindininventorybyname[`Niffis`],wobjectfindnearestbynameandobjectclass[37, `Garbage Barrel`]]}
				SetState {Garbage}
	IF:	ItemCountGE 1 {Penguin}
		DO:	DoAll
				DoExpr {actiontrygiveitem[wobjectfindininventorybyname[`Penguin`],wobjectfindnearestbynameandobjectclass[37, `Garbage Barrel`]]}
				SetState {Garbage}
	IF:	ItemCountGE 1 {Rabbit}
		DO:	DoAll
				DoExpr {actiontrygiveitem[wobjectfindininventorybyname[`Rabbit`],wobjectfindnearestbynameandobjectclass[37, `Garbage Barrel`]]}
				SetState {Garbage}
	IF:	ItemCountGE 1 {Sleech}
		DO:	DoAll
				DoExpr {actiontrygiveitem[wobjectfindininventorybyname[`Sleech`],wobjectfindnearestbynameandobjectclass[37, `Garbage Barrel`]]}
				SetState {Garbage}
	IF:	ItemCountGE 1 {Snowman}
		DO:	DoAll
				DoExpr {actiontrygiveitem[wobjectfindininventorybyname[`Snowman`],wobjectfindnearestbynameandobjectclass[37, `Garbage Barrel`]]}
				SetState {Garbage}
	IF:	ItemCountGE 1 {Thrungus}
		DO:	DoAll
				DoExpr {actiontrygiveitem[wobjectfindininventorybyname[`Thrungus`],wobjectfindnearestbynameandobjectclass[37, `Garbage Barrel`]]}
				SetState {Garbage}
~~ }
STATE: {viewAttr} ~~ {
	IF:	Expr {$viewAttr==1}
		DO:	CreateView {Attributes} {:attributes.xml}
	IF:	Expr {$viewAttr==0}
		DO:	DoAll
				DestroyView {Attributes}
				SetState {Default}
	IF:	Expr {uiviewexists[Attributes]==1}
		DO:	DoAll
				DoExpr {uisetlabel[uigetcontrol[Attributes, Strength], Strength \: +tostring[getcharattribute_base[1]]]}
				DoExpr {uisetlabel[uigetcontrol[Attributes, Endurance], Endurance \: +tostring[getcharattribute_base[2]]]}
				DoExpr {uisetlabel[uigetcontrol[Attributes, Coordination], Coordination \: +tostring[getcharattribute_base[4]]]}
				DoExpr {uisetlabel[uigetcontrol[Attributes, Quickness], Quickness \: +tostring[getcharattribute_base[3]]]}
				DoExpr {uisetlabel[uigetcontrol[Attributes, Focus], Focus \: +tostring[getcharattribute_base[5]]]}
				DoExpr {uisetlabel[uigetcontrol[Attributes, Self], Self \: +tostring[getcharattribute_base[6]]]}
				DoExpr {uisetlabel[uigetcontrol[Attributes, Health], Health \: +tostring[getcharvital_base[1]]]}
				DoExpr {uisetlabel[uigetcontrol[Attributes, Stamina], Stamina \: +tostring[getcharvital_base[2]]]}
				DoExpr {uisetlabel[uigetcontrol[Attributes, Mana], Mana \: +tostring[getcharvital_base[3]]]}
				SetState {Default}
~~ }
STATE: {viewBank} ~~ {
	IF:	Expr {$viewBank==1}
		DO:	DoAll
				CreateView {Bank} {:bank.xml}
				Chat {/b}
				SetState {Default}
	IF:	Expr {$viewBank==0}
		DO:	DoAll
				DestroyView {Bank}
				SetState {Default}
~~ }